import matplotlib as mpl #pip install matplotlib
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
# plt.plot([1, 3, 2, 4])
# plt.ylabel('some numbers')
# plt.show() #pip install pyqt5 to show plot in pycharm
# plt.close()
#
# #Let's plot the sine function's values generated by numpy
# h = np.linspace(0, 2 * np.pi, 100)
# i = np.sin(h)
# plt.plot(h,i)
# plt.show()
# plt.close()
#
# #Let's plot two things in the same graph
# p = np.linspace(0, 5, 20)
# q = np.linspace(0, 10, 20)
# plt.plot(p, q, 'purple') # line
# plt.plot(p, q, 'o')      # dots
# plt.show()
# plt.close()
#
# #an example of a 3D figure
# fig = plt.figure()
# ax = fig.add_subplot(projection='3d')
# X = np.arange(-5, 5, 0.15)
# Y = np.arange(-5, 5, 0.15)
# X, Y = np.meshgrid(X, Y)
# R = np.sqrt(X**2 + Y**2)
# Z = np.sin(R)
# ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap='viridis')
# plt.show()
# plt.close()
#
# #let's combine the usage of libraries.
# #in one dimension random numbers, in the other evenly distributed dates
ts = pd.Series(np.random.randn(1000), index=pd.date_range("1/1/2020", periods=1000))
ts = ts.cumsum() #cumsum means cumulative sum
# plt.plot(ts)
# plt.ylabel("cumulative sum")
# plt.show()
# plt.close()
#
# #multiple random plots generated automatically like this
# df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index, columns=["A", "B", "C", "D"])
# df = df.cumsum()
# plt.plot(df)
# plt.legend(df.columns)
# plt.show()
# plt.close()

#Bubble chart, 2D coordinate + value at that point
# b = np.matrix([[1, 2], [3, 4]])
# b_asarray = np.asarray(b)
# np.random.seed(19680801)  # seed the random number generator.
# data = {'a': np.arange(50),
#         'c': np.random.randint(0, 50, 50),
#         'd': np.random.randn(50)}
# data['b'] = data['a'] + 10 * np.random.randn(50)
# data['d'] = np.abs(data['d']) * 100
# #
# fig, ax = plt.subplots(figsize=(5, 2.7), layout='constrained')
# ax.scatter('a', 'b', c='c', s='d', data=data)
# ax.set_xlabel('entry a')
# ax.set_ylabel('entry b')
# plt.show()
# plt.close()

# #there are two ways of getting a plot
# #this is the object-orienter way
# x = np.linspace(0, 2, 100)  # Sample data.
# #
# # # Note that even in the OO-style, we use `.pyplot.figure` to create the Figure.
# fig, ax = plt.subplots(figsize=(5, 2.7), layout='constrained')
# ax.plot(x, x, label='linear')  # Plot some data on the axes.
# ax.plot(x, x**2, label='quadratic')  # Plot more data on the axes...
# ax.plot(x, x**3, label='cubic')  # ... and some more.
# ax.set_xlabel('x label')  # Add an x-label to the axes.
# ax.set_ylabel('y label')  # Add a y-label to the axes.
# ax.set_title("Simple Plot")  # Add a title to the axes.
# ax.legend()  # Add a legend.
# plt.show()
# plt.close()
# #
# #This is the pyplot, procedural way
# x = np.linspace(0, 2, 100)  # Sample data.
# plt.figure(figsize=(11, 6), layout='constrained')
# plt.plot(x, x, label='linear')  # Plot some data on the (implicit) axes.
# plt.plot(x, x**2, label='quadratic')  # etc.
# plt.plot(x, x**3, label='cubic')
# plt.xlabel('x label')
# plt.ylabel('y label')
# plt.title("Simple Plot")
# plt.legend()
# plt.show()
# plt.close()
# 
# #Adding some style to our charts
data1, data2, data3, data4 = np.random.randn(4, 100)  # make 4 random data sets
# fig, ax = plt.subplots(figsize=(13, 6))
# x = np.arange(len(data1))
# ax.plot(x, np.cumsum(data1), color='teal', linewidth=3, linestyle='--')
# l, = ax.plot(x, np.cumsum(data2), color='orange', linewidth=2)
# l.set_linestyle(':')
# plt.show()
# plt.close()
 
# #You may adjust the markers as well
# fig, ax = plt.subplots(figsize=(15, 9))
# ax.plot(data1, marker = 'o', fillstyle = "bottom", label='data1', markersize=10)
# ax.plot(data2, 'd', label='data2', markersize=13)
# ax.plot(data3, 'v', label='data3')
# ax.plot(data4, 's', label='data4')
# ax.legend()
# plt.xticks(fontsize=12, rotation=45)
# plt.show()
# plt.close()